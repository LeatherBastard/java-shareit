DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS items CASCADE;
DROP TABLE IF EXISTS requests CASCADE;
DROP TABLE IF EXISTS bookings CASCADE;
DROP TABLE IF EXISTS comments CASCADE;

CREATE TABLE users(
    user_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE
);


CREATE TABLE requests(
    request_id INTEGER NOT NULL  GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    description VARCHAR(50) NOT NULL,
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    created TIMESTAMP NOT NULL
);

CREATE TABLE items(
    item_id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    description VARCHAR(200),
    available BOOLEAN NOT NULL,
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    request_id INTEGER REFERENCES requests(request_id) ON DELETE CASCADE
);

CREATE TABLE bookings(
    booking_id INTEGER NOT NULL  GENERATED ALWAYS AS IDENTITY  PRIMARY KEY,
    start_date TIMESTAMP WITHOUT TIME ZONE NOT NULL ,
    end_date TIMESTAMP WITHOUT TIME ZONE NOT NULL ,
    item_id INTEGER REFERENCES items(item_id) ON DELETE CASCADE,
    booker_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    status VARCHAR(8) NOT NULL,
    CONSTRAINT valid_dates CHECK(start_date!=end_date AND end_date>start_date)
);

CREATE TABLE comments(
    comment_id INTEGER NOT NULL  GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    text VARCHAR(500) NOT NULL,
    item_id INTEGER REFERENCES items(item_id) ON DELETE CASCADE,
    author_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    created TIMESTAMP WITHOUT TIME ZONE NOT NULL
);
